.earth {
  position: relative;
  background-color: rgb(var(--rgbBackground));
  display: grid;
  place-content: center;
}

.loader {
  transition: opacity var(--durationL) var(--bezierFastoutSlowin);
  opacity: 0;
  grid-area: 1 / 1;
  place-self: center;
  margin-top: 40vh;
  position: sticky;
  top: 50vh;

  &[data-visible='true'] {
    opacity: 1;
  }
}

.viewport {
  position: sticky;
  top: 0;
  grid-area: 1 / 1;
  display: grid;
  grid-template: 100% / 100%;
  width: 100vw;
  height: 100vh;
  overflow: hidden;
}

.canvas {
  grid-area: 1 / 1;
  transition: opacity 1.6s var(--bezierFastoutSlowin);
  opacity: 0;
  cursor: grab;

  @media (--mediaTouch) {
    pointer-events: none;
  }

  &[data-grabbing='true'] {
    cursor: grabbing;
  }

  &[data-visible='true'] {
    opacity: 1;
  }
}

.labels {
  grid-area: 1 / 1;
  pointer-events: none;
}

.label {
  pointer-events: none;
  position: absolute;
  top: 0;
  left: 0;
  color: white;
  font-weight: var(--fontWeightMedium);
  font-size: var(--fontSizeBodyXS);
  text-shadow: 0 0 3px rgb(var(--rgbBlack)), 0 0 5px rgb(var(--rgbBlack)),
    0 0 20px rgb(var(--rgbBlack));
  transition: opacity var(--durationM) ease;
  transition-delay: var(--delay);
  font-family: var(--systemFontStack);
  transform: translate3d(-50%, -50%, 0) translate3d(var(--posX), var(--posY), 0);

  &[data-occluded='true'] {
    opacity: 0.2;
    text-shadow: none;
  }

  &[data-hidden='true'] {
    opacity: 0;
    transition-delay: 0ms;
  }
}

.vignette {
  grid-area: 1 / 1;
  background-image: radial-gradient(
    transparent,
    transparent,
    rgb(var(--rgbBackground) / 0.2),
    rgb(var(--rgbBackground) / 0.7)
  );
  position: relative;
  pointer-events: none;
}

.sections {
  pointer-events: none;
  position: relative;
  margin-top: -100vh;
}

.section {
  width: 100%;
  height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-shadow: 0 0 6px rgb(var(--rgbBlack));
  overflow-x: hidden;

  &[data-scrim='true'] {
    background: linear-gradient(
      rgb(var(--rgbBackground)),
      rgb(var(--rgbBackground) / 0.7),
      transparent
    );
  }

  &[data-scrim-reverse='true'] {
    background: linear-gradient(
      transparent,
      rgb(var(--rgbBackground) / 0.7),
      rgb(var(--rgbBackground))
    );
  }
}
